#include <iostream>
#include <thread>
#include <string>
#include <unistd.h>
#include <stdio.h>
#include <iostream>
#include <fstream>
#include <cmath>
#include <vector>
#include <mutex>

using namespace std;

mutex mtx;
vector <thread> threads;

string maze[30][30] = {};
string colors[14] = {"255 0 0", "0 255 0", "0 0 255", "255 255 0", "0 255 255", "255 0 255", "192 192 192", "128 128 128", "128 0 0", "128 128 0", "0 128 0", "128 0 128", "0 128 128", "0 0 128"};

void Move(int y, int x, string color) {
	vector <thread> threads;

	bool left = false;
	bool right = false;
	bool up = false;
	bool down = false;

	int ways = 0;

	string color2;
	string color3;

	//Left
	if (maze[y][x-1] == "255 255 255") {
		left=true;
		ways++;
	}

	//Right
	if (maze[y][x+1] == "255 255 255") {
		right=true;
		ways++;
	}

	//Up
	if (maze[y-1][x] == "255 255 255") {
		up=true;
		ways++;
	}

	//Down
	if (maze[y+1][x] == "255 255 255") {
		down=true;
		ways++;
	}

	if (ways == 0) {
		return;
	}

	if(ways > 0) {
		if(left) {
			mtx.lock();
			maze[y][x-1] = color;
			mtx.unlock();

			Move(y,x-1, color);

			left=false;
		}
		else if(right) {
			mtx.lock();
			maze[y][x+1] = color;
			mtx.unlock();

			Move(y,x+1, color);

			right=false;
		}
		else if(up) {
			mtx.lock();
			maze[y-1][x] = color;
			mtx.unlock();

			Move(y-1,x, color);

			up=false;
		}
		else {
			mtx.lock();
			maze[y+1][x] = color;
			mtx.unlock();

			Move(y+1,x, color);

			down=false;
		}
	}

	if(ways > 1) {
		int random=rand()%14;

		while (true) {
			if (color != colors[random]) {
				color2=colors[random];
				break;
			}
			else {
				random=rand()%5;
			}
		}

		if(left) {
			mtx.lock();
			maze[y][x-1] = color2;
			mtx.unlock();

			threads.push_back(thread(Move,y,x-1, color2));

			left=false;
		}
		else if(right) {
			mtx.lock();
			maze[y][x+1] = color2;
			mtx.unlock();

			threads.push_back(thread(Move,y,x+1, color2));

			right=false;
		}
		else if(up) {
			mtx.lock();
			maze[y-1][x] = color2;
			mtx.unlock();

			threads.push_back(thread(Move,y-1,x, color2));

			up=false;
		}
		else {
			mtx.lock();
			maze[y+1][x] = color2;
			mtx.unlock();

			threads.push_back(thread(Move,y+1,x, color2));

			down=false;
		}
	}

	if(ways > 2) {
		int random=rand()%14;

		while (true) {
			if (color != colors[random] && color2 != colors[random]) {
				color3=colors[random];
				break;
			}
			else {
				random=rand()%5;
			}
		}

		if(left) {
			mtx.lock();
			maze[y][x-1] = color3;
			mtx.unlock();

			threads.push_back(thread(Move,y,x-1, color2));
		}
		else if(right) {
			mtx.lock();
			maze[y][x+1] = color3;
			mtx.unlock();

			threads.push_back(thread(Move,y,x+1, color2));
		}
		else if(up) {
			mtx.lock();
			maze[y-1][x] = color3;
			mtx.unlock();

			threads.push_back(thread(Move,y-1,x, color2));
		}
		else {
			mtx.lock();
			maze[y+1][x] = color3;
			mtx.unlock();

			threads.push_back(thread(Move,y+1,x, color2));
		}
	}

	for (auto& th : threads) {
		if (th.joinable()) {
			th.join();
		}
	}
}

void CreateFile() {
	ofstream myfile;
	myfile.open("maze.ppm");
	myfile << "P3" << endl << "30 30" << endl << "255" << endl;

	for(int i=0; i<30; i++) {
		for(int j=0; j<30; j++) {
			myfile << maze[i][j] << " ";
		}
		myfile << endl;
	}

	myfile.close();

	system("open /Users/niquit/WIZUT/PW/maze.ppm");
}

int main(int argc, char **argv) {
	chdir("/Users/niquit/WIZUT/PW/");

	srand (time(NULL));

	maze[8][0]="255 0 0";

	thread t(Move,8, 0, colors[0]);
	t.join();

	CreateFile();

	return 0;
}
